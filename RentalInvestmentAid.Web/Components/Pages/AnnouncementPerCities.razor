@page "/AnnouncementPerCities"
@using RentalInvestmentAid.Caching
@using RentalInvestmentAid.Core
@using RentalInvestmentAid.Core.Announcement
@using RentalInvestmentAid.Database
@using RentalInvestmentAid.Models.City

@rendermode InteractiveServer

@if (_isLoading)
{
    <div class="spinner-border text-dark" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{    
    <div class="container">
        @if(_cityTreatment.GetCities()?.Count  == 0)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="cities-informations row">

                <CascadingValue Value=@_announcementTreatment>
                    @foreach (CityInformations city in CityInformations)
                    {    
                            <AnnouncementPerCity City=city  />
                    }
                </CascadingValue>
            </div>
        }
    </div>
}


@code {
    [CascadingParameter(Name = "CachingManager")]
    public CachingManager _cachingManager { get; set; }

    [CascadingParameter(Name = "DatabaseFactory")]
    public IDatabaseFactory _databaseFactory { get; set; }
    private CityTreatment _cityTreatment = null;

     AnnouncementTreatment _announcementTreatment = null;

    public List<CityInformations> CityInformations {
        get
        {
            if(_cityInformations is null || !_cityInformations.Any()){
                _cityInformations = _cityTreatment.GetCitiesWithAnnouncement().OrderBy(x => x.CityName).ToList();
            }
            return _cityInformations;
        } 
    }
    private List<CityInformations> _cityInformations = null;

    private bool _isLoading = true;

    protected override Task OnInitializedAsync()
    {
        _cachingManager = new CachingManager(_databaseFactory);
        _cityTreatment = new CityTreatment(_cachingManager, _databaseFactory);
        _announcementTreatment = new AnnouncementTreatment(_cachingManager, _databaseFactory);

        return base.OnInitializedAsync();
    }


    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine($"firstRender");
            _isLoading = false;
            InvokeAsync(base.StateHasChanged);
        }

        Console.WriteLine($"NOT firstRender");
        return base.OnAfterRenderAsync(firstRender);
    }

}
