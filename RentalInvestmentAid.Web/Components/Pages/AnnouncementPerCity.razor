@page "/AnnouncementPerCity"
@using RentalInvestmentAid.Caching
@using RentalInvestmentAid.Core
@using RentalInvestmentAid.Core.Announcement
@using RentalInvestmentAid.Database
@using RentalInvestmentAid.Models.Announcement
@using RentalInvestmentAid.Models.City
@inject IJSRuntime JS

@rendermode InteractiveServer



<div class="col-lg-4 cursor-pointer" id="city_@City.Id" @onclick="() => OnClickCity(City.Id)">
    <div class="row text-center" >
        <div class="card ">
            <div class="card-header">
                @City.CityName -  @City.ZipCode
            </div>
            <ul class="list-group list-group-flush">
                <li class="list-group-item"> @AnnouncementInformation.Count() Annonces</li>
                <li class="list-group-item"> @AnnouncementInformation.Where(ann => ann.RentabilityCalculated).Count() Calcul effectué</li>
                <li class="list-group-item"> @AnnouncementInformation.Where(ann => !ann.RentabilityCalculated).Count() Calcul NON effectué</li>
            </ul>
        </div>
    </div>
@*     <div class="@AnnouncementDisplayToggle" id="announcement_for_city_@City.Id">
        @foreach (AnnouncementInformation announcement in AnnouncementInformation)
        {
            <Announcement AnnouncementInformation="announcement"/>
        }
    </div> *@
</div>

<Modal @ref="modal" Fullscreen="ModalFullscreen.Always" />


@code {
    private Modal modal = default!;
    public string AnnouncementDisplayToggle { get; set; } = "d-none";
    private string hiddenClass = "d-none";

    [CascadingParameter]
    public AnnouncementTreatment AnnouncementTreatment { get; set; }
    [Parameter]
    public CityInformations City { get; set; }

    public List<AnnouncementInformation> AnnouncementInformation
    {
        get
        {
            if (_announcementInformation is null || _announcementInformation.Count () == 0)
            {
                _announcementInformation = AnnouncementTreatment.GetAnnouncementInformationByCityId(City.Id);
            }
            return _announcementInformation;
        }
    }
    private List<AnnouncementInformation> _announcementInformation;

    protected override Task OnInitializedAsync()
    {

        return base.OnInitializedAsync();
    }


    async Task OnClickCity(int cityId)
    {
        Console.WriteLine($"Click click {cityId}");

        if (String.IsNullOrEmpty(AnnouncementDisplayToggle))
            AnnouncementDisplayToggle = hiddenClass;
        else
            AnnouncementDisplayToggle = String.Empty;

        var parameters = new Dictionary<string, object>();
        parameters.Add("Announcements", AnnouncementInformation);
        await modal.ShowAsync<AnnouncementsForModal>(title: City.CityName, parameters: parameters);

    }


}
