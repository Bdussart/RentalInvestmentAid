@page "/announcement"

@using RentalInvestmentAid.Core.Announcement
@using RentalInvestmentAid.Database
@using RentalInvestmentAid.Models
@using RentalInvestmentAid.Models.Announcement
@using RentalInvestmentAid.Models.Bank
@using System.ComponentModel
@using RentalInvestmentAid.Models.Loan
@using RentalInvestmentAid.Models.Rental
@using RentalInvestmentAid.Caching
@using System.Collections.Concurrent

@rendermode InteractiveServer

<h3>Announcement</h3>

<div class="container">
    @if (_rentabilityResults?.Count == 0)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @foreach (var result in _rentabilityResults.OrderBy(rent => rent.AnnouncementInformation.CityInformations.CityName))
        {
            <div id="annoucment_@result.AnnouncementId" class="announcement">
                <div class="row text-center">
                    <a href="@result.AnnouncementInformation.UrlWebSite" target="_blank" class="col-sm-2">
                        <div class="card ">
                            <div class="card-header">
                                @result.AnnouncementInformation.CityInformations.CityName -  @result.AnnouncementInformation.CityInformations.ZipCode
                            </div>
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item"> @result.AnnouncementInformation.Price €</li>
                                <li class="list-group-item"> @result.AnnouncementInformation.Metrage m2</li>
                            </ul>
                        </div>
                    </a>
                    <div class="announcement_description col-sm-9 card-text">
                        @result.AnnouncementInformation.Description
                    </div>
                    <div class="announcement_read col-sm-1 ">
                        <input type="checkbox" checked="@result.AnnouncementInformation.Readed" @oninput="args => CheckboxChanged(result.AnnouncementId, args)">
                    </div>
                </div>
                <div class="row rents_and_loan">
                <div class="rents col-sm-4">
                    <Rents RentsInformation="@result.Rents" />
                </div>
                    <div class="loans  col-sm-8">
                        <div class="rates-informations">
                            <Rates RentsInformation="@result.Rents" RateInformation="_rateInformation" LoansInformations="@result.Loans" />
                        </div>
                    </div>
                </div>
            </div>
        }
    }

</div>

@code {
    private IDatabaseFactory _databaseFactory = new SqlServerDatabase();
    private ConcurrentBag<RentabilityResult>? _rentabilityResults = null;
    private ConcurrentBag<AnnouncementInformation> _announcementInformation = null;
    private ConcurrentBag<RentInformation> _rentInformation = null;
    private ConcurrentBag<LoanInformation> _loansInformation = null;
    private ConcurrentBag<RentalInformations> _rentalInformation = null;
    private CachingManager _cachingManager = null;
    private List<RateInformation> _rateInformation = null;
    private AnnouncementTreatment _announcementTreatment = null;


    protected override Task OnInitializedAsync()
    {
        _cachingManager = new CachingManager(_databaseFactory);
        _announcementTreatment = new AnnouncementTreatment(_cachingManager, _databaseFactory);
        _announcementInformation = new ConcurrentBag<AnnouncementInformation>(_announcementTreatment.GetAnnouncementsInformation());
        _rentInformation = new ConcurrentBag<RentInformation>(_databaseFactory.GetRentsInformations());
        _loansInformation = new ConcurrentBag<LoanInformation>(_databaseFactory.GetLoansInformations());
        _rentalInformation = new ConcurrentBag<RentalInformations>(_cachingManager.GetRentalInformations());
        _rentabilityResults = new ConcurrentBag<RentabilityResult>();
        _rateInformation = _cachingManager.GetRatesInformation();


        ParallelOptions parallelOptions = new()
            {
                MaxDegreeOfParallelism = 3,
            };

        Task.Factory.StartNew(() =>
        {
            Parallel.ForEachAsync(_databaseFactory.GetRentabilitiesResults(), parallelOptions, async (info, token) =>
        {
            await Task.Run(() =>
        {
                    info.AnnouncementInformation = _announcementInformation.FirstOrDefault(ann => ann.Id == info.AnnouncementId);
                    info.Loans = _loansInformation.Where(loan => info.LoanIds.Contains(loan.Id)).ToList();
                    info.Rents = _rentInformation.Where(rent => info.RentsIds.Contains(rent.Id)).ToList();
                    info.Rents.ForEach(rent =>
                    {
                        rent.RentalInformations = _rentalInformation.First(rental => rental.Id == rent.RentalInformations.Id);
                    });
                    _rentabilityResults.Add(info);
                    InvokeAsync(base.StateHasChanged);
                });
            });
        });

        return base.OnInitializedAsync();

    }


    public string CheckRentability(LoanInformation loan, List<RentInformation> rents)
    {
        string result = "table-danger not-rentable";

        if (rents.Where(rent => rent.Rental70Pourcent >= loan.MonthlyCostWithInsurrance).Any())
            result = "table-success rentable";
        return result;
    }

    private void CheckboxChanged(int announcementid, ChangeEventArgs e)
    {
        // get the checkbox state
        var value = e.Value;
        Console.WriteLine($"Checkbox changed");
    }
}
