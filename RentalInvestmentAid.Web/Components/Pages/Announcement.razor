@page "/announcement"

@using RentalInvestmentAid.Core
@using RentalInvestmentAid.Core.Announcement
@using RentalInvestmentAid.Core.Bank
@using RentalInvestmentAid.Core.Gemini
@using RentalInvestmentAid.Core.Rental
@using RentalInvestmentAid.Database
@using RentalInvestmentAid.Models
@using RentalInvestmentAid.Models.Announcement
@using RentalInvestmentAid.Models.Bank
@using System.ComponentModel
@using RentalInvestmentAid.Models.Loan
@using RentalInvestmentAid.Models.Rental
@using RentalInvestmentAid.Caching
@using System.Collections.Concurrent
@using RentalInvestmentAid.Queue
@using RentalInvestmentAid.GeminiAPICaller
@inject IJSRuntime JS


@rendermode InteractiveServer

<div class="container-fluid" id="container_annoucment_@AnnouncementInformation.Id">

    <div id="annoucment_@AnnouncementInformation.Id" class="announcement">
        <div class="row text-center">
            <a href="@AnnouncementInformation.UrlWebSite" target="_blank" class="col-sm-3">
                <div class="card ">
                    <div class="card-header">
                        @AnnouncementInformation.CityInformations.CityName -  @AnnouncementInformation.CityInformations.ZipCode
                    </div>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item"> Prix : @AnnouncementInformation.Price €</li>
                        <li class="list-group-item"> Frais de Notaire : @notaryFee €</li>
                        <li class="list-group-item"> Prix réel : @realPrice €</li>
                        <li class="list-group-item"> @AnnouncementInformation.Metrage m2</li>
                        <li class="list-group-item"> Date d'insertion : @AnnouncementInformation.CreatedDate.ToShortDateString()</li>
                        <li class="list-group-item"> Date de mise à jour @(AnnouncementInformation.UpdatedDate.HasValue?  @AnnouncementInformation.CreatedDate.ToShortDateString() : @AnnouncementInformation.UpdatedDate.Value.ToShortDateString())</li>
                    </ul>
                </div>
            </a>
            <div class="announcement_description col-sm-8 card-text">
                @AnnouncementInformation.Description
            </div>
            <div class="announcement_read col-sm-1 ">
                <input type="checkbox" checked="@AnnouncementInformation.Readed" @oninput="args => CheckboxChanged(AnnouncementInformation.Id, args)">
                <div>
                    <button type="button" class="btn btn-primary" @onclick="args => GetGeminiData(AnnouncementInformation.Id, args)">GEMINI</button>
                    @if(_geminiLoading){
                        <div class="spinner-border m-5 text-info" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    }
                </div>
                <button type="button" class="btn btn-danger" @onclick="args => DeleteAnnouncement(AnnouncementInformation.Id, args)">Supprimer l'annonce</button>
            </div>
        </div>
        <div class="row rents_and_loan">
            <div class="rents col-sm-4">
                <Rents RentsInformation=@Rents />
            </div>
            <div class="loans  col-sm-8">
                <div class="rates-informations">
                    <Rates RentsInformation=@Rents RateInformation=@RateInformation LoansInformations="@Loans" OnlyRentable=@OnlyRentable />
                </div>
            </div>
        </div>
        <div class="alert alert-dark" role="alert">
            @((MarkupString)@AnnouncementInformation.InformationProvidedByGemini)
        </div>
    </div>
</div>

@code {

    private double notaryFee = 0;
    private double realPrice = 0;

    private bool _geminiLoading = false;

    [Parameter]
    public AnnouncementInformation AnnouncementInformation { get; set; }
    [Parameter]

    public bool OnlyRentable { get; set; } = false;

    public List<RentInformation> Rents
    {
        get
        {
            if (_rentInformation is null || _rentInformation.Count() == 0)
            {
                _rentInformation = _rentalTreament.GetRentsForAnnouncementId(AnnouncementInformation.Id);
            }
            return _rentInformation;
        }
    }
    private List<RentInformation> _rentInformation = null;

    public List<LoanInformation> Loans
    {
        get
        {
            if (_loansInformation is null || _loansInformation.Count() == 0)
            {
                _loansInformation = _rentalTreament.GetLoansForAnnouncementId(AnnouncementInformation.Id);
            }
            return _loansInformation;
        }
    }
    private List<LoanInformation> _loansInformation = null;

    public List<RateInformation> RateInformation
    {
        get
        {
            if (_rateInformation is null || !_rateInformation.Any())
            {
                _rateInformation = _bankTreament.GetRates();
            }
            return _rateInformation;
        }
    }
    private List<RateInformation> _rateInformation = null;

    private RentalTreament _rentalTreament = null;
    private BankTreatment _bankTreament = null;
    private IBroker _announcementBroker = null;

    [CascadingParameter]
    public AnnouncementTreatment AnnouncementTreatment { get; set; }

    [CascadingParameter(Name ="CachingManager")]
    public CachingManager _cachingManager  { get; set; }

    [CascadingParameter(Name = "DatabaseFactory")]
    public IDatabaseFactory _databaseFactory { get; set; }

    private GeminiTreatment _geminiTreatment = null;

    protected override Task OnInitializedAsync()
    {
        _announcementBroker = new RabbitMQBroker(Settings.SettingsManager.AnnouncementQueueName);
        _rentalTreament = new RentalTreament(_cachingManager, _databaseFactory, new LeFigaroWebSiteData(_cachingManager, _announcementBroker));
        _bankTreament = new BankTreatment(_cachingManager, _databaseFactory);
        _geminiTreatment = new GeminiTreatment(_cachingManager, _databaseFactory);

        double price = float.Parse(AnnouncementInformation.Price);
        notaryFee = price * 0.10;
        realPrice = notaryFee + price;

        return base.OnInitializedAsync();

    }

    public string CheckRentability(LoanInformation loan, List<RentInformation> rents)
    {
        string result = "table-danger not-rentable";

        if (rents.Where(rent => rent.Rental70Pourcent >= loan.MonthlyCostWithInsurrance).Any())
            result = "table-success rentable";
        return result;
    }

    private async Task CheckboxChanged(int announcementid, ChangeEventArgs e)
    {
        // get the checkbox state
        var value = e.Value;
        Console.WriteLine($"Checkbox changed");


    }
    private async void GetGeminiData(int announcementid, MouseEventArgs e)
    {
        _geminiLoading = true;
        await InvokeAsync(StateHasChanged);

        string result = await _geminiTreatment.GetPromptInformation(AnnouncementInformation);

        if (!String.IsNullOrWhiteSpace(result))
        {
            AnnouncementInformation.InformationProvidedByGemini = result;
            await InvokeAsync(StateHasChanged);
        }

        _geminiLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async void DeleteAnnouncement(int announcementid, MouseEventArgs e)
    {
        Console.WriteLine($"DeleteAnnouncement {announcementid}");
        await JS.InvokeVoidAsync("removeElementById", $"container_annoucment_{announcementid}");
        await AnnouncementTreatment.DeleteAnnoucementInformation(announcementid);
    }
}
