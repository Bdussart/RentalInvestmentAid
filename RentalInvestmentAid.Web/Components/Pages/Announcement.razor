@page "/announcement"

@using RentalInvestmentAid.Core
@using RentalInvestmentAid.Core.Announcement
@using RentalInvestmentAid.Core.Bank
@using RentalInvestmentAid.Database
@using RentalInvestmentAid.Models
@using RentalInvestmentAid.Models.Announcement
@using RentalInvestmentAid.Models.Bank
@using System.ComponentModel
@using RentalInvestmentAid.Models.Loan
@using RentalInvestmentAid.Models.Rental
@using RentalInvestmentAid.Caching
@using System.Collections.Concurrent

@rendermode InteractiveServer

<div class="container">

    <div id="annoucment_@AnnouncementInformation.Id" class="announcement">
                <div class="row text-center">
            <a href="@AnnouncementInformation.UrlWebSite" target="_blank" class="col-sm-2">
                        <div class="card ">
                            <div class="card-header">
                                @AnnouncementInformation.CityInformations.CityName -  @AnnouncementInformation.CityInformations.ZipCode
                            </div>
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item"> @AnnouncementInformation.Price €</li>
                                <li class="list-group-item"> @AnnouncementInformation.Metrage m2</li>
                            </ul>
                        </div>
                    </a>
                    <div class="announcement_description col-sm-9 card-text">
                        @AnnouncementInformation.Description
                    </div>
                    <div class="announcement_read col-sm-1 ">
                <input type="checkbox" checked="@AnnouncementInformation.Readed" @oninput="args => CheckboxChanged(AnnouncementInformation.Id, args)">
                    </div>
                </div>
                <div class="row rents_and_loan">
                <div class="rents col-sm-4">
                    <Rents RentsInformation="@Rents" />
                </div>
                    <div class="loans  col-sm-8">
                        <div class="rates-informations">
                    <Rates RentsInformation="@Rents" RateInformation="RateInformation" LoansInformations="@Loans" />
                        </div>
                    </div>
                </div>
            </div>
</div>

@code {
    private CachingManager _cachingManager = null;
    private IDatabaseFactory _databaseFactory = new SqlServerDatabase();

    [Parameter]
    public AnnouncementInformation AnnouncementInformation { get; set; }

    public List<RentInformation> Rents
    {
        get
        {
            if (_rentInformation is null ||_rentInformation.Count() == 0)
            {
                _rentInformation = _rentalTreament.GetRentsForAnnouncementI(AnnouncementInformation.Id);
            }
            return _rentInformation;
        }
    }
    private List<RentInformation> _rentInformation = null;


    public List<LoanInformation> Loans
    {
        get
        {
            if (_loansInformation is null || _loansInformation.Count() == 0)
            {
                _loansInformation = _rentalTreament.GetLoansForAnnouncementI(AnnouncementInformation.Id);
            }
            return _loansInformation;
        }
    }
    private List<LoanInformation> _loansInformation = null;

    public List<RateInformation> RateInformation
    {
        get
        {
            if (_rateInformation is null || !_rateInformation.Any())
            {
                _rateInformation = _bankTreament.GetRates();
            }
            return _rateInformation;
        }
    }
    private List<RateInformation> _rateInformation = null;

    private RentalTreament _rentalTreament = null;
    private BankTreatment _bankTreament = null;


    protected override Task OnInitializedAsync()
    {
        _cachingManager = new CachingManager(_databaseFactory);
        _rentalTreament = new RentalTreament(_cachingManager, _databaseFactory);
        _bankTreament = new BankTreatment(_cachingManager, _databaseFactory);

        return base.OnInitializedAsync();

    }


    public string CheckRentability(LoanInformation loan, List<RentInformation> rents)
    {
        string result = "table-danger not-rentable";

        if (rents.Where(rent => rent.Rental70Pourcent >= loan.MonthlyCostWithInsurrance).Any())
            result = "table-success rentable";
        return result;
    }

    private void CheckboxChanged(int announcementid, ChangeEventArgs e)
    {
        // get the checkbox state
        var value = e.Value;
        Console.WriteLine($"Checkbox changed");
    }
}
